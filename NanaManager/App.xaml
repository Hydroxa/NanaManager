<Application x:Class="NanaManager.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:NanaManager">
    <Application.Resources>
        <!--#region Colours-->
		<Color x:Key="BackgroundCentre">#FF3C0326</Color>
		<Color x:Key="BackgroundEdge">#FF200C27</Color>
		<Color x:Key="ListViewColor">#44AE006B</Color>
		<Color x:Key="ListViewSelectColor">#88AE006B</Color>
		<Color x:Key="PrimaryHighlightColor">#CF228D</Color>
		<Color x:Key="PrimaryPressedColor">#9D005A</Color>
		<Color x:Key="PrimaryIdleColor">#AE006B</Color>
		<Color x:Key="PrimaryDisabledColor">#7D205A</Color>
		<Color x:Key="LightTextColor">White</Color>
        <RadialGradientBrush x:Key="Background">
            <GradientStop Color="{DynamicResource BackgroundCentre}" Offset="0"/>
            <GradientStop Color="{DynamicResource BackgroundEdge}" Offset="1"/>
        </RadialGradientBrush>
        <SolidColorBrush x:Key="CloseButtonHighlight" Color="Red"/>
        <SolidColorBrush x:Key="CloseButtonPressed" Color="PaleVioletRed"/>
        <SolidColorBrush x:Key="MenuButtonHighlight" Color="#686868"/>
        <SolidColorBrush x:Key="MenuButtonIdle" Color="#404040"/>
        <SolidColorBrush x:Key="MenuButtonPressed" Color="#2C2C2C"/>
		<SolidColorBrush x:Key="MenuButtonDisabled" Color="#3D3D3D"/>
		<SolidColorBrush x:Key="LightText" Color="{DynamicResource LightTextColor}"/>
        <SolidColorBrush x:Key="DarkText" Color="Black"/>
        <SolidColorBrush x:Key="LightGlass" Color="#22FFFFFF"/>
        <SolidColorBrush x:Key="DarkGlass" Color="#4C646464"/>
		<SolidColorBrush x:Key="BlackGlass" Color="#88000000"/>
		<SolidColorBrush x:Key="Highlight" Color="#AE006B"/>
		<SolidColorBrush x:Key="TranslucentHighlight" Color="#88AE006B"/>
		<SolidColorBrush x:Key="GlassHighlight" Color="#22AE006B"/>
		<SolidColorBrush x:Key="PrimaryIdle" Color="{DynamicResource PrimaryDisabledColor}"/>
		<SolidColorBrush x:Key="PrimaryHighlight" Color="{DynamicResource PrimaryHighlightColor}"/>
		<SolidColorBrush x:Key="PrimaryPressed" Color="{DynamicResource PrimaryPressedColor}"/>
		<SolidColorBrush x:Key="PrimaryDisabled" Color="{DynamicResource PrimaryDisabledColor}"/>
		<SolidColorBrush x:Key="DisabledText" Color="#7D7D7D"/>
		<SolidColorBrush x:Key="NavButtonIdle" Color="#4C646464"/>
		<SolidColorBrush x:Key="NavButtonHighlight" Color="#4C747474"/>
		<SolidColorBrush x:Key="NavButtonPressed" Color="#4C5A5A5A"/>
		<SolidColorBrush x:Key="NavButtonDisabled" Color="#4C000000"/>
		<SolidColorBrush x:Key="TextHighlightColor" Color="#FFFF21B8"/>
		<SolidColorBrush x:Key="TextSelectColor" Color="#FF424242"/>
		<SolidColorBrush x:Key="CaretColor" Color="#FFF"/>
		<SolidColorBrush x:Key="TagRejectColor" Color="#88ff1212"/>
		<SolidColorBrush x:Key="CheckGlyphColor" Color="{DynamicResource LightTextColor}"/>

		<!--#region Templates-->
		<ItemsPanelTemplate x:Key="tagViewer">
			<StackPanel/>
		</ItemsPanelTemplate>
		<!--#endregion-->
		<!--#region Styles-->
		<Style x:Key="{x:Type CheckBox}"
       TargetType="{x:Type CheckBox}">
			<Setter Property="SnapsToDevicePixels"
          Value="true" />
			<Setter Property="OverridesDefaultStyle"
          Value="true" />
			<Setter Property="FocusVisualStyle"
          Value="{DynamicResource CheckBoxFocusVisual}" />
			<Setter Property="Foreground" Value="{DynamicResource LightText}"/>
			<Setter Property="FontSize" Value="14"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type CheckBox}">
						<BulletDecorator Background="Transparent">
							<BulletDecorator.Bullet>
								<Border x:Name="Border" CornerRadius="2" BorderThickness="0" Background="{DynamicResource PrimaryIdle}" Width="14" Height="14">
									<Grid>
										<Ellipse Visibility="Collapsed" Margin="3" VerticalAlignment="Stretch" Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" x:Name="CheckMark" SnapsToDevicePixels="False" StrokeThickness="2" Fill="{DynamicResource CheckGlyphColor}"/>
										<Ellipse Visibility="Collapsed" Margin="3" VerticalAlignment="Stretch" Width="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" x:Name="IndeterminateMark" SnapsToDevicePixels="False" StrokeThickness="2" Stroke="{DynamicResource CheckGlyphColor}"/>
									</Grid>
								</Border>
							</BulletDecorator.Bullet>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal"/>
									<VisualState x:Name="MouseOver">
										<Storyboard>
											<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
												<DiscreteColorKeyFrame KeyTime="0" Value="{DynamicResource PrimaryHighlightColor}"/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Pressed">
										<Storyboard>
											<ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
												<DiscreteColorKeyFrame KeyTime="0" Value="{DynamicResource PrimaryPressedColor}"/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
								<VisualStateGroup x:Name="CheckStates">
									<VisualState x:Name="Checked">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckMark" Storyboard.TargetProperty="(UIElement.Visibility)">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Unchecked"/>
									<VisualState x:Name="Indeterminate">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateMark">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<ContentPresenter Margin="4,0,0,0"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            RecognizesAccessKey="True" />
						</BulletDecorator>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		
		<Style x:Key="Editable Groupbox Textbox" TargetType="{x:Type TextBox}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="Foreground" Value="{DynamicResource LightText}"/>
			<Setter Property="MaxLength" Value="16"/>
			<Setter Property="FontSize" Value="18"/>
			<Setter Property="BorderThickness" Value="0"/>
			<Setter Property="AllowDrop" Value="False"/>
			<Setter Property="CaretBrush" Value="{DynamicResource CaretColor}"/>
			<Setter Property="SelectionBrush" Value="{DynamicResource TextHighlightColor}"/>
			<Setter Property="SelectionTextBrush" Value="{DynamicResource TextSelectColor}"/>
		</Style>
		<Style x:Key="Tag Label" TargetType="{x:Type Label}">
			<Setter Property="Background" Value="{x:Null}"/>
			<Setter Property="Foreground" Value="{DynamicResource DarkText}"/>
			<Setter Property="BorderThickness" Value="0"/>
			<Setter Property="FontSize" Value="14"/>
		</Style>
		<Style x:Key="Tag Button" TargetType="{x:Type ToggleButton}">
			<Setter Property="Background" Value="{x:Null}"/>
			<Setter Property="Foreground" Value="{DynamicResource LightText}"/>
			<Setter Property="FontFamily" Value="Segoe UI"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Focusable" Value="False"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Background="{TemplateBinding Background}" CornerRadius="8">
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsChecked" Value="True">
					<Setter Property="Background" Value="{DynamicResource Highlight}"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="Settings Button" TargetType="{x:Type ToggleButton}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="Foreground" Value="{DynamicResource LightText}"/>
			<Setter Property="FontFamily" Value="Segoe UI"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Focusable" Value="False"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Background="{TemplateBinding Background}" CornerRadius="0,8,8,0">
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center">
								<ContentPresenter.Resources>
									<Style TargetType="{x:Type TextBlock}">
										<Setter Property="TextWrapping" Value="Wrap"/>
									</Style>
								</ContentPresenter.Resources>
							</ContentPresenter>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="{DynamicResource GlassHighlight}"/>
				</Trigger>
				<Trigger Property="IsChecked" Value="True">
					<Setter Property="Background" Value="{DynamicResource TranslucentHighlight}"/>
				</Trigger>
			</Style.Triggers>
		</Style>
        <Style x:Key="Menu Button" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{DynamicResource MenuButtonIdle}"/>
            <Setter Property="Foreground" Value="{DynamicResource LightText}"/>
            <Setter Property="FontFamily" Value="Segoe UI Semibold"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Margin" Value="5,5,5,0"/>
            <Setter Property="Height" Value="25"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{x:Null}" >
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource MenuButtonHighlight}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{DynamicResource MenuButtonPressed}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource DisabledText}"/>
                    <Setter Property="Background" Value="{DynamicResource MenuButtonDisabled}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
		<Style x:Key="Menu ToggleButton" TargetType="{x:Type ToggleButton}">
			<Setter Property="Background" Value="{DynamicResource MenuButtonIdle}"/>
			<Setter Property="Foreground" Value="{DynamicResource LightText}"/>
			<Setter Property="FontFamily" Value="Segoe UI Semibold"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Margin" Value="5,5,5,0"/>
			<Setter Property="Height" Value="25"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border Background="{TemplateBinding Background}" BorderBrush="{x:Null}" >
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="{DynamicResource MenuButtonHighlight}"/>
				</Trigger>
				<Trigger Property="IsPressed" Value="True">
					<Setter Property="Background" Value="{DynamicResource MenuButtonPressed}"/>
				</Trigger>
				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="Foreground" Value="{DynamicResource DisabledText}"/>
					<Setter Property="Background" Value="{DynamicResource MenuButtonDisabled}"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="Primary Button" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{DynamicResource PrimaryIdle}"/>
            <Setter Property="Foreground" Value="{DynamicResource LightText}"/>
            <Setter Property="FontFamily" Value="Segoe UI Semibold"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Margin" Value="5,5,5,0"/>
            <Setter Property="Height" Value="25"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{x:Null}" >
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource PrimaryHighlight}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{DynamicResource PrimaryPressed}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource DisabledText}"/>
                    <Setter Property="Background" Value="{DynamicResource PrimaryDisabled}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
		<Style x:Key="Tag Textbox Deselect" TargetType="{x:Type TextBox}">
			<Setter Property="Background" Value="{x:Null}"/>
			<Setter Property="Foreground" Value="{DynamicResource DarkText}"/>
			<Setter Property="BorderThickness" Value="0"/>
			<Setter Property="FontSize" Value="14"/>
			<Setter Property="CaretBrush" Value="{DynamicResource CaretColor}"/>
			<Setter Property="SelectionBrush" Value="{DynamicResource TextHighlightColor}"/>
			<Setter Property="SelectionTextBrush" Value="{DynamicResource TextSelectColor}"/>
			<Style.Triggers>
				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="Background" Value="{DynamicResource DarkGlass}"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="Tag Textbox Select" TargetType="{x:Type TextBox}">
			<Setter Property="Background" Value="{DynamicResource TranslucentHighlight}"/>
			<Setter Property="Foreground" Value="{DynamicResource DarkText}"/>
			<Setter Property="BorderThickness" Value="0"/>
			<Setter Property="FontSize" Value="14"/>
			<Setter Property="CaretBrush" Value="{DynamicResource CaretColor}"/>
			<Setter Property="SelectionBrush" Value="{DynamicResource TextHighlightColor}"/>
			<Setter Property="SelectionTextBrush" Value="{DynamicResource TextSelectColor}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TextBoxBase}">
						<Border Background="{TemplateBinding Background}"
								x:Name="Bd" BorderBrush="Black"
								BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10">
							<ScrollViewer x:Name="PART_ContentHost"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="Background" Value="{DynamicResource DarkGlass}"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="Tag Textbox Highlight" TargetType="{x:Type TextBox}">
			<Setter Property="Background" Value="{DynamicResource Highlight}"/>
			<Setter Property="Foreground" Value="{DynamicResource DarkText}"/>
			<Setter Property="BorderThickness" Value="0"/>
			<Setter Property="FontSize" Value="14"/>
			<Setter Property="CaretBrush" Value="{DynamicResource CaretColor}"/>
			<Setter Property="SelectionBrush" Value="{DynamicResource TextHighlightColor}"/>
			<Setter Property="SelectionTextBrush" Value="{DynamicResource TextSelectColor}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TextBoxBase}">
						<Border Background="{TemplateBinding Background}"
								x:Name="Bd" BorderBrush="Black"
								BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10">
							<ScrollViewer x:Name="PART_ContentHost"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="Background" Value="{DynamicResource DarkGlass}"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="Tag Groupbox" TargetType="{x:Type GroupBox}">
            <Setter Property="Margin" Value="7, 0, 0, 0"/>
            <Setter Property="Background" Value="{DynamicResource LightGlass}"/>
            <Setter Property="Foreground" Value="{DynamicResource LightText}"/>
			<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
		</Style>
		<Style x:Key="Item Stack" TargetType="{x:Type ListView}">
			<Setter Property="ItemsPanel">
				<Setter.Value>
					<ItemsPanelTemplate>
						<StackPanel Orientation="Horizontal"/>
					</ItemsPanelTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="Background" Value="{x:Null}"/>
			<Setter Property="BorderThickness" Value="0"/>
		</Style>
		<Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
			<Style.Resources>
				<SolidColorBrush x:Key="Item.MouseOver.Background" Color="{DynamicResource ListViewColor}"/>
				<SolidColorBrush x:Key="Item.MouseOver.Border" Color="#0000"/>
				<SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#0000"/>
				<SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#1000"/>
				<SolidColorBrush x:Key="ItemSelectedActive.Background" Color="{DynamicResource ListViewSelectColor}"/>
				<SolidColorBrush x:Key="ItemSelectedActive.Border" Color="#0000"/>
				<Style TargetType="{x:Type ListBoxItem}">
					<Setter Property="SnapsToDevicePixels" Value="True"/>
					<Setter Property="Padding" Value="4,1"/>
					<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
					<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
					<Setter Property="Background" Value="Transparent"/>
					<Setter Property="BorderBrush" Value="Transparent"/>
					<Setter Property="BorderThickness" Value="1"/>
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ListBoxItem}">
								<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" CornerRadius="10">
									<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
								</Border>
								<ControlTemplate.Triggers>
									<MultiTrigger>
										<MultiTrigger.Conditions>
											<Condition Property="IsMouseOver" Value="True"/>
										</MultiTrigger.Conditions>
										<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
										<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
									</MultiTrigger>
									<MultiTrigger>
										<MultiTrigger.Conditions>
											<Condition Property="Selector.IsSelectionActive" Value="False"/>
											<Condition Property="IsSelected" Value="True"/>
										</MultiTrigger.Conditions>
										<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
										<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
									</MultiTrigger>
									<MultiTrigger>
										<MultiTrigger.Conditions>
											<Condition Property="Selector.IsSelectionActive" Value="True"/>
											<Condition Property="IsSelected" Value="True"/>
										</MultiTrigger.Conditions>
										<Setter Property="Background" TargetName="Bd" Value="{x:Null}"/>
										<Setter Property="BorderBrush" TargetName="Bd" Value="{x:Null}"/>
									</MultiTrigger>
									<Trigger Property="IsEnabled" Value="False">
										<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Style.Resources>
		</Style>
		<Style x:Key="{x:Type ListView}" TargetType="{x:Type ListView}">
			<Style.Resources>
				<SolidColorBrush x:Key="Item.MouseOver.Background" Color="{DynamicResource ListViewColor}"/>
				<SolidColorBrush x:Key="Item.MouseOver.Border" Color="#0000"/>
				<SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#0000"/>
				<SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#1000"/>
				<SolidColorBrush x:Key="ItemSelectedActive.Background" Color="{DynamicResource ListViewSelectColor}"/>
				<SolidColorBrush x:Key="ItemSelectedActive.Border" Color="#0000"/>
				<Style TargetType="{x:Type ListViewItem}">
					<Setter Property="SnapsToDevicePixels" Value="True"/>
					<Setter Property="Padding" Value="4,1"/>
					<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
					<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
					<Setter Property="Background" Value="Transparent"/>
					<Setter Property="BorderBrush" Value="Transparent"/>
					<Setter Property="BorderThickness" Value="1"/>
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ListViewItem}">
								<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" CornerRadius="10">
									<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="2"/>
								</Border>
								<ControlTemplate.Triggers>
									<MultiTrigger>
										<MultiTrigger.Conditions>
											<Condition Property="IsMouseOver" Value="True"/>
										</MultiTrigger.Conditions>
										<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
										<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
									</MultiTrigger>
									<MultiTrigger>
										<MultiTrigger.Conditions>
											<Condition Property="Selector.IsSelectionActive" Value="False"/>
											<Condition Property="IsSelected" Value="True"/>
										</MultiTrigger.Conditions>
										<Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
										<Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
									</MultiTrigger>
									<MultiTrigger>
										<MultiTrigger.Conditions>
											<Condition Property="Selector.IsSelectionActive" Value="True"/>
											<Condition Property="IsSelected" Value="True"/>
										</MultiTrigger.Conditions>
										<Setter Property="Background" TargetName="Bd" Value="{DynamicResource TranslucentHighlight}"/>
										<Setter Property="BorderBrush" TargetName="Bd" Value="{x:Null}"/>
									</MultiTrigger>
									<Trigger Property="IsEnabled" Value="False">
										<Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Style.Resources>
		</Style>
		<Style x:Key="Navigation Button" TargetType="Button">
			<Setter Property="Background" Value="{DynamicResource NavButtonIdle}"/>
			<Setter Property="Foreground" Value="{DynamicResource LightText}"/>
			<Setter Property="FontFamily" Value="Segoe UI Semibold"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Margin" Value="5,5,5,0"/>
			<Setter Property="Height" Value="25"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border Background="{TemplateBinding Background}" BorderBrush="{x:Null}" >
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="{DynamicResource NavButtonHighlight}"/>
				</Trigger>
				<Trigger Property="IsPressed" Value="True">
					<Setter Property="Background" Value="{DynamicResource NavButtonPressed}"/>
				</Trigger>
				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="Foreground" Value="{DynamicResource DisabledText}"/>
					<Setter Property="Background" Value="{DynamicResource NavButtonDisabled}"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="MenuItem">
						<Border BorderThickness="{TemplateBinding Border.BorderThickness}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}" Name="templateRoot" SnapsToDevicePixels="True" CornerRadius="8">
							<Grid Margin="-1,-1,-1,-1">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" MinWidth="22" SharedSizeGroup="MenuItemIconColumnGroup" />
									<ColumnDefinition Width="13" />
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="30" />
									<ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
									<ColumnDefinition Width="20" />
								</Grid.ColumnDefinitions>
								<ContentPresenter Content="{TemplateBinding MenuItem.Icon}" ContentSource="Icon" Name="Icon" Width="16" Height="16" Margin="3,3,3,3" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
								<Border BorderThickness="1,1,1,1" BorderBrush="#FF26A0DA" Background="#3D26A0DA" Name="GlyphPanel" Width="22" Height="22" Margin="-1,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Hidden" ClipToBounds="False">
									<Path Data="F1M10,1.2L4.7,9.1 4.5,9.1 0,5.2 1.3,3.5 4.3,6.1 8.3,0 10,1.2z" Fill="#FF212121" Name="Glyph" Width="10" Height="11" FlowDirection="LeftToRight" />
								</Border>
								<ContentPresenter RecognizesAccessKey="True" Content="{TemplateBinding HeaderedContentControl.Header}" ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}" ContentSource="Header" Name="menuHeaderContainer" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="Left" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" Grid.Column="2" />
								<TextBlock Text="{TemplateBinding MenuItem.InputGestureText}" Name="menuGestureText" Margin="{TemplateBinding Control.Padding}" VerticalAlignment="Center" Opacity="0.7" Grid.Column="4" />
							</Grid>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsHighlighted" Value="True">
								<Setter Property="Panel.Background" TargetName="templateRoot" Value="{DynamicResource TranslucentHighlight}"/>
								<Setter Property="Border.BorderBrush" TargetName="templateRoot" Value="Transparent"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="OverridesDefaultStyle" Value="True" />
			<Setter Property="Grid.IsSharedSizeScope" Value="true" />
			<Setter Property="HasDropShadow" Value="True" />
			<Setter Property="Foreground" Value="{DynamicResource LightText}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ContextMenu}">
						<Border x:Name="Border" Background="{DynamicResource BlackGlass}" BorderThickness="0" CornerRadius="8">
							<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="HasDropShadow" Value="true">
								<Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
								<Setter TargetName="Border" Property="CornerRadius" Value="10" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<!--#region ProgressBar-->
		<Style x:Key="{x:Type ProgressBar}" TargetType="{x:Type ProgressBar}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ProgressBar}">
						<Grid MinHeight="14" MinWidth="200" Background="{x:Null}">
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Determinate" />
									<VisualState x:Name="Indeterminate">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Duration="00:00:00"
                                                 Storyboard.TargetName="PART_Indicator"
                                                 Storyboard.TargetProperty="Background">
												<DiscreteObjectKeyFrame KeyTime="00:00:00">
													<DiscreteObjectKeyFrame.Value>
														<SolidColorBrush>Transparent</SolidColorBrush>
													</DiscreteObjectKeyFrame.Value>
												</DiscreteObjectKeyFrame>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<Border x:Name="PART_Track" CornerRadius="15" BorderThickness="2" BorderBrush="{DynamicResource LightGlass}">
							</Border>
							<Border x:Name="PART_Indicator" 
									CornerRadius="15" 
									BorderThickness="0"
									HorizontalAlignment="Left" 
									Background="{TemplateBinding Foreground}" 
									Margin="2,2,0,2">
							</Border>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="Background" Value="{DynamicResource DarkGlass}">
			</Setter>
			<Setter Property="Foreground" Value="{DynamicResource TranslucentHighlight}">
			</Setter>
		</Style>
		<!--#endregion-->
		<!--#region ScrollBar-->
		<Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="OverridesDefaultStyle" Value="True" />
			<Setter Property="Focusable" Value="False" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Border x:Name="Border" Margin="1" CornerRadius="8" BorderThickness="0" Background="{DynamicResource Highlight}">
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal" />
									<VisualState x:Name="MouseOver" />
									<VisualState x:Name="Pressed"/>
									<VisualState x:Name="Disabled"/>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Fill="{DynamicResource LightText}" />
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="OverridesDefaultStyle" Value="true" />
			<Setter Property="IsTabStop" Value="false" />
			<Setter Property="Focusable" Value="false" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Border Background="Transparent" />
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="OverridesDefaultStyle" Value="true" />
			<Setter Property="IsTabStop" Value="false" />
			<Setter Property="Focusable" Value="false" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Border CornerRadius="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" />
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition MaxHeight="18" />
					<RowDefinition Height="0.00001*" />
					<RowDefinition MaxHeight="18" />
				</Grid.RowDefinitions>
				<Border Grid.RowSpan="3" CornerRadius="8" Background="{DynamicResource DarkGlass}" />
				<RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" />
				<Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
					<Track.DecreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
					</Track.DecreaseRepeatButton>
					<Track.Thumb>
						<Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0" BorderBrush="{DynamicResource Highlight}" Background="{DynamicResource Highlight}"/>
					</Track.Thumb>
					<Track.IncreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
					</Track.IncreaseRepeatButton>
				</Track>
				<RepeatButton Grid.Row="2" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z" />
			</Grid>
		</ControlTemplate>
		<ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition MaxWidth="18" />
					<ColumnDefinition Width="0.00001*" />
					<ColumnDefinition MaxWidth="18" />
				</Grid.ColumnDefinitions>
				<Border Grid.ColumnSpan="3" CornerRadius="8" Background="{DynamicResource DarkGlass}" />
				<RepeatButton Grid.Column="0" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
				<Track x:Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
					<Track.DecreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
					</Track.DecreaseRepeatButton>
					<Track.Thumb>
						<Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1" BorderBrush="{DynamicResource Highlight}" Background="{DynamicResource Highlight}"/>
					</Track.Thumb>
					<Track.IncreaseRepeatButton>
						<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
					</Track.IncreaseRepeatButton>
				</Track>
				<RepeatButton Grid.Column="2" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z" />
			</Grid>
		</ControlTemplate>
		<Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="OverridesDefaultStyle" Value="true" />
			<Style.Triggers>
				<Trigger Property="Orientation" Value="Horizontal">
					<Setter Property="Width" Value="Auto" />
					<Setter Property="Height" Value="18" />
					<Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
				</Trigger>
				<Trigger Property="Orientation" Value="Vertical">
					<Setter Property="Width" Value="18" />
					<Setter Property="Height" Value="Auto" />
					<Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
				</Trigger>
			</Style.Triggers>
		</Style>
		<!--#endregion-->
		<!--#endregion-->

    </Application.Resources>
</Application>
